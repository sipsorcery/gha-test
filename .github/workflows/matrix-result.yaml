name: Matrix Record Results Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  repository_dispatch:
    types: [matrix-test-command]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/passing-information-between-jobs
jobs:
  # Job Description: Performs the Data Channel Test between each combination of the client and server for each library.
  interoptests:
    runs-on: ubuntu-latest

    # Map a step output to a job output
    outputs:
      result_a_c: ${{ steps.maintask.outputs.result_a_c }}
      result_a_d: ${{ steps.maintask.outputs.result_a_d }}
      result_b_c: ${{ steps.maintask.outputs.result_b_c }}
      result_b_d: ${{ steps.maintask.outputs.result_b_d }}

    strategy:
      matrix:
        server: ["a", "b"]
        client: ["c", "d"]

    steps:
      - name: Run main task
        id: maintask
        run: |
          # Store output
          echo '{"result_${{ matrix.server }}_${{ matrix.client }}": ${{ matrix.client }}}' >> "$GITHUB_OUTPUT"

  collate:
    runs-on: ubuntu-latest
    needs: [interoptests]
    
    steps:
      - name: Collate
        run: |
          echo "Collating..."
          echo "The output from interoptest is: ${{ toJSON(needs.interoptests.outputs) }}"
          results="${{ toJSON(needs.interop-tests.outputs) }}"
          
          # Convert the JSON string back to a Bash associative array
          declare -A outputs
          while IFS='=' read -r key value; do
              outputs["$key"]="$value"
          done < <(echo "$results" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"')

          # Iterate over the outputs
          for key in "${!outputs[@]}"; do
            echo "Key: $key, Value: ${outputs[$key]}"
          done
          